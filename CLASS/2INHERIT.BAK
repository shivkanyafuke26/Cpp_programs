//single inheritance using private derivation
#include<iostream.h>
#include<conio.h>
class B
{
int a;   //private; not inheritable
public:
int b;   //public; ready for inheritance
void get_ab();
int get_a(void);
void show_a(void);
};
class D:private B   //private derivation
{
int c;
public:
void mul(void);
void display(void);
};
void B::get_ab(void)
{
cout<<"Enter values for a&b = ";
cin>>a>>b;
}
int B::get_a()
{
return a;
}
void B::show_a()
{
cout<<"a="<<a<<endl;
}
void D::mul()
{
get_ab();
c=b*get_a();    //a cannot be used directly
}

void D::display()
{
show_a();       //outputs value of a;
cout<<"b="<<b<<endl;
cout<<"c="<<c<<endl;
}
int main()
{

D d;
clrscr();
d.mul();
d.display();
getch();
}
